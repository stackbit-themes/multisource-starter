import { AirtableFieldType } from './airtable-table-types';

export interface AirtableWebhook {
    /**
     * An identifier for the webhook (WebhookId).
     */
    id: string;

    /**
     * Whether or not notifications are enabled for the webhook.
     */
    areNotificationsEnabled: boolean;

    /**
     * The cursor associated with the next payload that will be generated.
     * This cursor will increase every time a new payload is generated for this webhook.
     */
    cursorForNextPayload: number;

    /**
     * Whether or not the webhook is enabled. Webhooks may be turned off
     * automatically such as when the specification becomes invalid. See error codes.
     */
    isHookEnabled: boolean;

    /**
     * An identifier for the created webhook.
     */
    lastSuccessfulNotificationTime: string | null;

    /**
     * The url registered with the webhook. May be null if none was given.
     */
    notificationUrl: string | null;

    /**
     * The time when the webhook expires and is disabled in the ISO format.
     * The webhook will not expire if this is null (in the case User API keys are used)
     */
    expirationTime?: string;

    lastNotificationResult: WebhooksNotification | null;

    /**
     * The specification registered with the webhook.
     */
    specification: {
        options: AirtableWebhookSpecification;
    };
}

export type WebhooksNotification = WebhooksNotificationSuccess | WebhooksNotificationFail;

export interface WebhooksNotificationSuccess {
    success: true;

    /**
     * The time of the most recent notification.
     */
    completionTimestamp: string;

    /**
     * The roundtrip duration of the network call.
     */
    durationMs: number;

    /**
     * The number of times the notification was retried. (0 = first try)
     */
    retryNumber: number;
}

export interface WebhooksNotificationFail {
    success: false;

    /**
     * Object containing the error message.
     */
    error: {
        message: string;
    };

    /**
     * The time of the most recent notification.
     */
    completionTimestamp: string;

    /**
     * The roundtrip duration of the network call.
     */
    durationMs: number;

    /**
     * The number of times the notification was retried. (0 = first try)
     */
    retryNumber: number;

    /**
     * Whether or not Airtable will attempt to deliver a notification again.
     */
    willBeRetried: boolean;
}

export interface AirtableWebhookSpecification {
    /**
     * A webhook specification can contain a filters object. F
     * or example, the specification for a webhook watching the data in a table is as follows:
     *
     * Aside from dataTypes, the keys in a filters object are optional.
     * By default, a webhook will generate payloads across an entire base
     * according to the specified dataTypes. We strongly recommend that your
     * integration specify a filters object with a subset of the filter keys
     * to ensure that your integration is notified for only the most relevant events.
     *
     * @example
     * {
     *   "options": {
     *     "filters": {
     *       "dataTypes": [
     *         "tableData"
     *       ],
     *       "recordChangeScope": "tbl00000000000000"
     *     }
     *   }
     * }
     *
     */
    filters: {
        /**
         * Only generate payloads for changes in the specified TableId or ViewId.
         */
        recordChangeScope?: string;

        /**
         * Only generate payloads that contain changes affecting objects of these types.
         *
         * tableData: record and cell value changes
         * tableFields: field changes
         * tableMetadata: table name and description changes
         */
        dataTypes: ('tableData' | 'tableFields' | 'tableMetadata')[];

        /**
         * Only generate payloads that contain changes of these types.
         */
        changeTypes?: ('add' | 'remove' | 'update')[];

        /**
         * Only generate payloads for changes from these sources.
         * If omitted, changes from all sources are reported.
         *
         * client: changes generated by a user through the web or mobile clients
         * publicApi: changes generated through the Airtable API
         * formSubmission: changes generated when a form is submitted
         * automation: changes generated through an automation action
         * system: changes generated by system events, such as processing time function formulas
         * sync: changes generated through Airtable Sync
         */
        fromSources?: ('client' | 'publicApi' | 'formSubmission' | 'automation' | 'system' | 'sync' | 'anonymousUser' | 'unknown')[];

        /**
         * Additional options for source filtering. This allows users to filter form submissions by ViewId.
         */
        sourceOptions?: {
            formSubmission?: {
                viewId: string;
            };
        };

        /**
         * Only generate payloads for changes that modify values in cells in these fields.
         * If omitted, all fields within the table/view/base are watched.
         */
        watchDataInFieldIds?: string[];

        /**
         * Only generate payloads for changes that modify the schemas of these fields.
         * If omitted, schemas of all fields within the table/view/base are watched.
         */
        watchSchemasOfFieldIds?: string[];
    };
    /**
     * By default, the payloads only contain the data that changed.
     * In order to generate payloads with more contextual data,
     * an includes object may be added to the specification.
     */
    includes?: {
        /**
         * A list of fields to include in the payload regardless of whether or not they changed.
         */
        includeCellValuesInFieldIds?: string[] | 'all';

        /**
         * If true, include the previous cell value in the payload.
         */
        includePreviousCellValues?: boolean;

        /**
         * If true, include the previous field definition in the payload.
         */
        includePreviousFieldDefinitions?: boolean;
    };
}

export interface AirtableWebhookPayload {
    /**
     * The action responsible for the change. We may add additional sources or
     * source metadata in the future and this will not be considered a breaking
     * change. API consumers are expected to handle unknown sources gracefully.
     */
    actionMetadata: {
        source: string;
        sourceMetadata: any;
    };

    /**
     * A number which can be used to determine all changes within a transaction.
     */
    baseTransactionNumber: number;

    /**
     * The payload format's version number. This is currently just v0, but it
     * may be increased in the future for breaking payload changes.
     */
    payloadFormat: 'v0';

    /**
     * The time the action occurred.
     */
    timestamp: string;

    changedTablesById?: Record<string, WebhookTableChanged>;
    createdTablesById?: Record<string, WebhookTableCreated>;
    destroyedTableIds?: string[];

    error?: true;
    code?: 'INVALID_FILTERS' | 'INVALID_HOOK' | 'INTERNAL_ERROR';
}

export interface WebhookTableChanged {
    changedViewsById?: Record<
        string,
        {
            changedRecordsById?: Record<string, WebhookChangedRecord>;
            createdRecordsById?: Record<string, WebhookCreatedRecord>;
            destroyedRecordIds?: string[];
        }
    >;
    changedFieldsById?: Record<
        string,
        {
            current: {
                type?: AirtableFieldType;
                name?: string;
            };
            previous: {
                type?: AirtableFieldType;
                name?: string;
            };
        }
    >;
    changedRecordsById?: Record<string, WebhookChangedRecord>;
    createdFieldsById?: Record<
        string,
        {
            type: AirtableFieldType;
            name: string;
        }
    >;
    createdRecordsById?: Record<string, WebhookCreatedRecord>;
    changedMetadata?: {
        current: {
            description?: string | null;
            name?: string;
        };
        previous: {
            description?: string | null;
            name?: string;
        };
    };
    destroyedFieldIds?: string[];
    destroyedRecordIds?: string[];
}

export interface WebhookTableCreated {
    fieldsById?: Record<
        string,
        {
            type: AirtableFieldType;
            name: string;
        }
    >;
    recordsById?: Record<
        string,
        {
            createdTime: string;
            cellValuesByFieldId: Record<string, any>;
        }
    >;
    metadata?: {
        description: string | null;
        name: string;
    };
}

export interface WebhookChangedRecord {
    current: {
        cellValuesByFieldId: Record<string, any>;
    };
    previous?: {
        cellValuesByFieldId: Record<string, any>;
    };
    unchanged?: {
        cellValuesByFieldId: Record<string, any>;
    };
}

export interface WebhookCreatedRecord {
    createdTime: string;
    cellValuesByFieldId: Record<string, any>;
}
